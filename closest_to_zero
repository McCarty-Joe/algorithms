/****************************************************************
Author: Joe McCarty, Jonathan Ziefle, Roger Smith
Date: 2014-10-07


Overview: Calculates the closest to zero sum of the contiguous sub arrays of
an array.
*****************************************************************/

#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <cmath>
#include <cstdlib>
#include <ctime>

using std::cout;
using std::cin;
using std::endl;
using std::string;
using std::vector;
using std::stringstream;
using std::ifstream;
using std::ofstream;
using std::abs;
using std::fixed;

//reads array from file
void file_read();

//creates random number arrays
void random_list();

//algoritham 1
void algorithm1(vector<int> data, int& zero_distance, int& start, int& end);

//algorithm 1
void algorithm2(vector<int> data, int& zero_distance, int& start, int& end);

//prints results to file
void print(vector<int> data, int& zero_distance, int& start, int& end, ofstream& output);

int main() {
    string choice;

    cout << "Welcome to CS 325 - Assignment #1" << endl;
    cout << "Please make a selection:" << endl;
    cout << "(1) Read from test file" << endl;
    cout << "(2) Create random arrays" << endl;
    cout << "(3) Quit" << endl;
    do{
        cout << "Selection: ";
        getline(cin, choice);
    } while(choice != "1" && choice != "2" && choice != "3");

    switch (atoi(choice.c_str())) {
        case 1:
            file_read();
            break;
        case 2:
            random_list();
            break;

        case 3:
        default:
            cout << "Goodbye!" << endl;
    }

    return 0;
}

void file_read(){
    vector<int> data;
    string file_name, line;
    string file_out1 = "algorithm1_file.txt";
    string file_out2 = "algorithm2_file.txt";
    int zero_distance;
    int start, end;
    int j;
    clock_t begin;
    double duration;

    cout << "Please select an input file: ";
    getline(cin, file_name);
    ifstream file(file_name.c_str());

    ofstream output1;
    ofstream output2;
    output1.open(file_out1.c_str());
    output2.open(file_out2.c_str());

    while (getline(file, line)){
        stringstream ss(line);
        int entry;

        if (ss.peek() == '[')
            ss.ignore();

        while (ss >> entry){
            data.push_back(entry);

            if (ss.peek() == ',')
                ss.ignore();
        }

        //algorithm 1
        begin = clock(); //start timer

        for (j = 0; j < 10; j++){
            algorithm1(data, zero_distance, start, end);
        }

        duration = (clock() - begin) / (double) CLOCKS_PER_SEC / j; //end timer

        print(data, zero_distance, start, end, output1);
        output1.precision(4);
        output1 << "Time to calculate: " << fixed << duration << endl << endl;


        //algorithm 2
        begin = clock(); //start timer

        for (j = 0; j < 10; j++){
            algorithm2(data, zero_distance, start, end);
        }

        duration = (clock() - begin) / (double) CLOCKS_PER_SEC / j; //end timer

        print(data, zero_distance, start, end, output2);
        output2.precision(4);
        output2 << "Time to calculate: " << fixed << duration << endl << endl;

        data.clear();
    }
    output1.close();
    output2.close();
    cout << "Results printed to " << file_out1 << " and " << file_out2 << "." << endl;
}

void random_list(){
    vector<int> data;
    string file_out1 = "algorithm1_rand.txt";
    string file_out2 = "algorithm2_rand.txt";
    int zero_distance;
    int start, end;
    int j;
    clock_t begin;
    double duration;
    int n;
    int factor = 100;

    ofstream output1;
    ofstream output2;

    srand ((unsigned int)time(NULL) );
    //srand (time(NULL));

    output1.open(file_out1.c_str());
    output2.open(file_out2.c_str());

    for(int size = 100; size < 10000; size += factor){
        //create random number array
        for(int i = 0; i < size; i++){
           n = rand() % 1999 + (-999);
           data.push_back(n);
        }

        if (size < 1000){
            //algorithm 1
            begin = clock(); //start timer

            for (j = 0; j < 10; j++){
                algorithm1(data, zero_distance, start, end);
            }

            duration = (clock() - begin) / (double) CLOCKS_PER_SEC / j; //end timer

            print(data, zero_distance, start, end, output1);
            output1.precision(4);
            output1 << "Time to calculate: " << fixed << duration << endl << endl;
        }

        //algorithm 2
        begin = clock(); //start timer

        for (j = 0; j < 10; j++){
            algorithm2(data, zero_distance, start, end);
        }

        duration = (clock() - begin) / (double) CLOCKS_PER_SEC / j; //end timer

        print(data, zero_distance, start, end, output2);
        output2.precision(4);
        output2 << "Time to calculate: " << fixed << duration << endl << endl;

        if (size >= 1000)
            factor = 1000;

        data.clear();
    }

    output1.close();
    output2.close();

    cout << "Results printed to " << file_out1 << " and " << file_out2 << "." << endl;
}

void algorithm1(vector<int> data, int& zero_distance, int& start, int& end) {
    int count = data.size();
    int sum = 0;
    zero_distance = 1000;

    //moves the starting point
    for (int i = 0; i < count; i++){
        //moves the ending point
        for (int j = i; j < count; j++){
            //sums up numbers between starting and ending point
            for (int k = i; k <= j; k++){
                sum += data[k];
            }
            if (abs(sum) <= abs(zero_distance)){
                zero_distance = sum;
                start = i;
                end = j;
            }
            sum = 0;
        }
    }
}

void algorithm2(vector<int> data, int& zero_distance, int& start, int& end) {
    int count = data.size();
    int sum = 0;
    zero_distance = 1000;

    //moves the starting point
    for (int i = 0; i < count; i++){
        //moves the ending point and keeps rolling sum
        for (int j = i; j < count; j++){
            sum += data[j];

            if (abs(sum) <= abs(zero_distance)){
                zero_distance = sum;
                start = i;
                end = j;
            }
        }
        sum = 0;
    }
}

void print(vector<int> data, int& zero_distance, int& start, int& end, ofstream& output){

    //prints array size
    output << "Input array size: " << data.size() << endl;

    //prints input array
    output << "Input array: ";
    output << "[";
    for (int i = 0; i < data.size(); i++){
        output << data[i];
        if (i != data.size() - 1)
            output << ",";
    }
    output << "]" << endl;

    //prints sum
    output << "Closest to zero sum: " << zero_distance << endl;

    //prints sub array
    output << "Closest to zero sub array: ";
    output << "[";
    for (int i = start; i <= end; i++){
        output << data[i];
        if (i != end )
            output << ",";
    }
    output << "]" << endl;
}
